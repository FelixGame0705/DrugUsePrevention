@page "/CourseManagement"
@model DrugUsePrevention.Pages.CourseManagement.CourseManagementModel
@{
    ViewData["Title"] = "Quản lý Khóa học";   
}
 @section Styles {
        <link rel="stylesheet" href="~/css/course-management.css" asp-append-version="true">
 }

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <div class="d-flex justify-content-between align-items-center mb-4">
                <h1 class="mb-0">
                    <i class="fas fa-graduation-cap me-2"></i>Quản lý Khóa học
                </h1>
                <div class="btn-group" role="group">
                    <button type="button" class="btn btn-success" onclick="courseManager.showCreateCourseModal()">
                        <i class="fas fa-plus me-2"></i>Tạo khóa học
                    </button>
                    <button type="button" class="btn btn-info" onclick="courseManager.showMyCoursesModal()">
                        <i class="fas fa-user-graduate me-2"></i>Khóa học của tôi
                    </button>
                    <button type="button" class="btn btn-primary" onclick="courseManager.showDashboard()">
                        <i class="fas fa-chart-dashboard me-2"></i>Dashboard
                    </button>
                </div>
            </div>

            <!-- Filter Section -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">
                        <i class="fas fa-filter me-2"></i>Bộ lọc và Tìm kiếm
                    </h5>
                </div>
                <div class="card-body">
                    <div class="row g-3">
                        <div class="col-md-2">
                            <label class="form-label">Số lượng/trang:</label>
                            <select id="pageSize" class="form-select">
                                <option value="10" selected>10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Cấp độ:</label>
                            <select id="levelFilter" class="form-select">
                                <option value="">Tất cả</option>
                                <option value="beginner">Cơ bản</option>
                                <option value="intermediate">Trung cấp</option>
                                <option value="advanced">Nâng cao</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Danh mục:</label>
                            <select id="categoryFilter" class="form-select">
                                <option value="">Tất cả</option>
                                <option value="family">Gia đình</option>
                                <option value="youth">Thanh thiếu niên</option>
                                <option value="adult">Người lớn</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Trạng thái:</label>
                            <select id="statusFilter" class="form-select">
                                <option value="">Tất cả</option>
                                <option value="active">Hoạt động</option>
                                <option value="inactive">Không hoạt động</option>
                                <option value="pending">Chờ duyệt</option>
                                <option value="approved">Đã duyệt</option>
                            </select>
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Từ ngày:</label>
                            <input type="date" id="startDate" class="form-control">
                        </div>
                        <div class="col-md-2">
                            <label class="form-label">Đến ngày:</label>
                            <input type="date" id="endDate" class="form-control">
                        </div>
                        <div class="col-12">
                            <div class="btn-group" role="group">
                                <button type="button" class="btn btn-primary" onclick="courseManager.loadCourses()">
                                    <i class="fas fa-search me-2"></i>Tìm kiếm
                                </button>
                                <button type="button" class="btn btn-outline-secondary" onclick="courseManager.clearFilters()">
                                    <i class="fas fa-times me-2"></i>Xóa bộ lọc
                                </button>
                                <button type="button" class="btn btn-outline-info" onclick="courseManager.refreshData()">
                                    <i class="fas fa-sync-alt me-2"></i>Làm mới
                                </button>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Loading & Error States -->
            <div id="loadingAlert" class="alert alert-info d-none">
                <div class="d-flex align-items-center">
                    <div class="spinner-border spinner-border-sm me-2"></div>
                    <span>Đang tải dữ liệu...</span>
                </div>
            </div>

            <div id="errorAlert" class="alert alert-danger alert-dismissible d-none">
                <strong>Lỗi:</strong> <span id="errorMessage"></span>
                <button type="button" class="btn-close" data-bs-dismiss="alert"></button>
            </div>

            <!-- Quick Stats -->
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card text-white bg-primary">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="card-title">Tổng khóa học</h6>
                                    <h3 id="totalCourses">0</h3>
                                </div>
                                <div class="align-self-center">
                                    <i class="fas fa-graduation-cap fa-2x"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-success">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="card-title">Đã duyệt</h6>
                                    <h3 id="approvedCourses">0</h3>
                                </div>
                                <div class="align-self-center">
                                    <i class="fas fa-check-circle fa-2x"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-warning">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="card-title">Chờ duyệt</h6>
                                    <h3 id="pendingCourses">0</h3>
                                </div>
                                <div class="align-self-center">
                                    <i class="fas fa-clock fa-2x"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card text-white bg-info">
                        <div class="card-body">
                            <div class="d-flex justify-content-between">
                                <div>
                                    <h6 class="card-title">Tổng học viên</h6>
                                    <h3 id="totalStudents">0</h3>
                                </div>
                                <div class="align-self-center">
                                    <i class="fas fa-users fa-2x"></i>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Courses Table -->
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">
                        <i class="fas fa-list me-2"></i>Danh sách Khóa học
                    </h5>
                    <span id="resultsInfo" class="badge bg-secondary"></span>
                </div>
                <div class="card-body p-0">
                    <div class="table-responsive">
                        <table class="table table-hover mb-0" id="coursesTable">
                            <thead class="table-dark">
                                <tr>
                                    <th style="width: 60px;">ID</th>
                                    <th style="width: 200px;">Khóa học</th>
                                    <th>Mô tả</th>
                                    <th style="width: 100px;">Cấp độ</th>
                                    <th style="width: 120px;">Trạng thái</th>
                                    <th style="width: 80px;">Học viên</th>
                                    <th style="width: 100px;">Ngày tạo</th>
                                    <th style="width: 200px;">Thao tác</th>
                                </tr>
                            </thead>
                            <tbody id="coursesTableBody">
                                <tr>
                                    <td colspan="8" class="text-center py-4">
                                        <i class="fas fa-search fa-2x text-muted mb-2"></i>
                                        <div class="text-muted">Nhấn "Tìm kiếm" để xem dữ liệu</div>
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

            <!-- Pagination -->
            <nav class="mt-4">
                <ul id="pagination" class="pagination justify-content-center"></ul>
            </nav>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        console.log('=== COURSE MANAGEMENT INLINE SCRIPT LOADING ===');
        
        // ===== COURSE SERVICE =====
        class CourseService {
            constructor(baseUrl = '/api/courses') {
                this.API_BASE = baseUrl;
                console.log('CourseService initialized with base URL:', this.API_BASE);
            }

            getAuthToken() {
                return localStorage.getItem('authToken') || sessionStorage.getItem('authToken');
            }

            getHeaders() {
                const headers = {
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                };
                
                const token = this.getAuthToken();
                if (token) {
                    headers['Authorization'] = `Bearer ${token}`;
                }
                
                return headers;
            }

            async getCourses(options = {}) {
                try {
                    console.log('CourseService.getCourses called with options:', options);
                    
                    const {
                        pageIndex = 1,
                        pageSize = 10,
                        level = null,
                        category = null,
                        startDate = null,
                        endDate = null
                    } = options;

                    const params = new URLSearchParams({
                        pageIndex: pageIndex.toString(),
                        pageSize: pageSize.toString()
                    });
                    
                    if (level) params.append('level', level);
                    if (category) params.append('category', category);
                    if (startDate) params.append('startDate', startDate);
                    if (endDate) params.append('endDate', endDate);

                    const url = `${this.API_BASE}?${params.toString()}`;
                    console.log('Calling API:', url);

                    const response = await fetch(url, {
                        method: 'GET',
                        headers: this.getHeaders()
                    });

                    console.log('Response status:', response.status);

                    if (!response.ok) {
                        const errorText = await response.text();
                        console.error('API Error Response:', errorText);
                        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                    }

                    const data = await response.json();
                    console.log('API Response:', data);

                    return {
                        success: true,
                        data: data
                    };

                } catch (error) {
                    console.error('CourseService.getCourses error:', error);
                    return {
                        success: false,
                        error: error.message,
                        data: null
                    };
                }
            }
        }

        // ===== LEARNING SERVICE =====
        class LearningService {
            constructor(baseUrl = '/api/learning') {
                this.API_BASE = baseUrl;
                console.log('LearningService initialized');
            }

            async getUserDashboard() {
                console.log('LearningService.getUserDashboard - Mock implementation');
                return {
                    success: true,
                    data: {
                        totalCourses: 5,
                        completedCourses: 2,
                        inProgress: 3
                    }
                };
            }
        }

        // ===== COURSE MANAGER =====
        class CourseManager {
            constructor(courseService, learningService) {
                console.log('CourseManager constructor called');
                this.courseService = courseService;
                this.learningService = learningService;
                this.currentPage = 1;
                this.totalPages = 1;
                
                this.initializeElements();
                console.log('CourseManager initialized successfully');
            }

            initializeElements() {
                this.elements = {
                    coursesTableBody: document.getElementById('coursesTableBody'),
                    pagination: document.getElementById('pagination'),
                    loadingAlert: document.getElementById('loadingAlert'),
                    errorAlert: document.getElementById('errorAlert'),
                    errorMessage: document.getElementById('errorMessage'),
                    resultsInfo: document.getElementById('resultsInfo')
                };
                console.log('Elements found:', Object.keys(this.elements).filter(key => this.elements[key] !== null));
            }

            async loadCourses(page = 1) {
                console.log('Loading courses, page:', page);
                
                try {
                    this.showLoading();
                    this.hideError();

                    const filters = {
                        pageIndex: page,
                        pageSize: document.getElementById('pageSize')?.value || 10,
                        level: document.getElementById('levelFilter')?.value || null,
                        category: document.getElementById('categoryFilter')?.value || null,
                        startDate: document.getElementById('startDate')?.value || null,
                        endDate: document.getElementById('endDate')?.value || null
                    };

                    console.log('Calling courseService.getCourses with filters:', filters);
                    const result = await this.courseService.getCourses(filters);
                    console.log('getCourses result:', result);

                    if (result.success && result.data) {
                        this.displayCourses(result.data);
                        this.updatePagination(result.data);
                        this.updateStats(result.data);
                        this.updateResultsInfo(result.data);
                    } else {
                        this.showError('Không thể tải danh sách khóa học: ' + (result.error || 'Unknown error'));
                    }

                } catch (error) {
                    console.error('Error loading courses:', error);
                    this.showError('Lỗi khi tải khóa học: ' + error.message);
                } finally {
                    this.hideLoading();
                }
            }

            displayCourses(apiResponse) {
                console.log('Displaying courses:', apiResponse);
                const tbody = this.elements.coursesTableBody;
                
                if (!tbody) {
                    console.error('Table body not found');
                    return;
                }

                if (!apiResponse.success || !apiResponse.data || !Array.isArray(apiResponse.data)) {
                    tbody.innerHTML = '<tr><td colspan="8" class="text-center text-danger">Không có dữ liệu hoặc lỗi API</td></tr>';
                    return;
                }

                const courses = apiResponse.data;
                if (courses.length === 0) {
                    tbody.innerHTML = '<tr><td colspan="8" class="text-center text-muted">Không tìm thấy khóa học nào</td></tr>';
                    return;
                }

                tbody.innerHTML = courses.map(course => this.renderCourseRow(course)).join('');
                console.log('Displayed', courses.length, 'courses');
            }

            renderCourseRow(course) {
                return `
                    <tr>
                        <td>${course.courseID}</td>
                        <td>
                            <div class="d-flex align-items-center">
                                ${course.thumbnailUrl ? `<img src="${course.thumbnailUrl}" alt="" style="width: 40px; height: 40px; object-fit: cover; border-radius: 4px;" class="me-2">` : ''}
                                <div>
                                    <strong>${course.title}</strong>
                                    ${course.level ? `<br><small class="text-muted">Cấp độ: ${course.level}</small>` : ''}
                                </div>
                            </div>
                        </td>
                        <td><span title="${course.description}">${this.truncateText(course.description || '', 100)}</span></td>
                        <td><span class="badge bg-info">${course.level || 'N/A'}</span></td>
                        <td>
                            <div>
                                <span class="badge ${course.isActive ? 'bg-success' : 'bg-secondary'}">
                                    ${course.isActive ? 'Hoạt động' : 'Tạm dừng'}
                                </span><br>
                                <span class="badge ${course.isAccept ? 'bg-primary' : 'bg-warning'}">
                                    ${course.isAccept ? 'Đã duyệt' : 'Chờ duyệt'}
                                </span>
                            </div>
                        </td>
                        <td class="text-center">${course.totalStudents || 0}</td>
                        <td><small>${this.formatDate(course.createdAt)}</small></td>
                        <td>
                            <div class="btn-group-vertical btn-group-sm">
                                <button class="btn btn-outline-info btn-sm" onclick="courseManager.viewCourseDetails(${course.courseID})" title="Chi tiết">
                                    <i class="fas fa-eye"></i> Chi tiết
                                </button>
                                <button class="btn btn-outline-primary btn-sm" onclick="courseManager.manageCourseContents(${course.courseID})" title="Nội dung">
                                    <i class="fas fa-list"></i> Nội dung
                                </button>
                                <button class="btn btn-outline-success btn-sm" onclick="courseManager.registerForCourse(${course.courseID})" title="Đăng ký">
                                    <i class="fas fa-user-plus"></i> Đăng ký
                                </button>
                            </div>
                        </td>
                    </tr>
                `;
            }

            updatePagination(apiResponse) {
                const pagination = this.elements.pagination;
                if (!pagination) return;

                if (!apiResponse.pagination) {
                    pagination.innerHTML = '';
                    return;
                }

                this.currentPage = parseInt(apiResponse.pagination.currentPage) || 1;
                this.totalPages = parseInt(apiResponse.pagination.totalPages) || 1;

                let html = '';

                // Previous button
                html += `
                    <li class="page-item ${this.currentPage === 1 ? 'disabled' : ''}">
                        <a class="page-link" href="#" onclick="event.preventDefault(); courseManager.loadCourses(${Math.max(1, this.currentPage - 1)})">Trước</a>
                    </li>
                `;

                // Page numbers
                const startPage = Math.max(1, this.currentPage - 2);
                const endPage = Math.min(this.totalPages, this.currentPage + 2);
                
                for (let i = startPage; i <= endPage; i++) {
                    html += `
                        <li class="page-item ${i === this.currentPage ? 'active' : ''}">
                            <a class="page-link" href="#" onclick="event.preventDefault(); courseManager.loadCourses(${i})">${i}</a>
                        </li>
                    `;
                }

                // Next button
                html += `
                    <li class="page-item ${this.currentPage >= this.totalPages ? 'disabled' : ''}">
                        <a class="page-link" href="#" onclick="event.preventDefault(); courseManager.loadCourses(${Math.min(this.totalPages, this.currentPage + 1)})">Sau</a>
                    </li>
                `;

                pagination.innerHTML = html;
            }

            updateStats(apiResponse) {
                try {
                    if (apiResponse.pagination) {
                        const total = apiResponse.pagination.totalCount || 0;
                        document.getElementById('totalCourses').textContent = total;
                        
                        // Calculate stats from actual data
                        let approved = 0, pending = 0, totalStudents = 0;
                        if (apiResponse.data && Array.isArray(apiResponse.data)) {
                            apiResponse.data.forEach(course => {
                                if (course.isAccept) approved++;
                                else pending++;
                                totalStudents += course.totalStudents || 0;
                            });
                        }
                        
                        document.getElementById('approvedCourses').textContent = approved;
                        document.getElementById('pendingCourses').textContent = pending;
                        document.getElementById('totalStudents').textContent = totalStudents;
                    }
                } catch (error) {
                    console.error('Error updating stats:', error);
                }
            }

            updateResultsInfo(apiResponse) {
                const info = this.elements.resultsInfo;
                if (!info) return;

                if (apiResponse.pagination) {
                    const { currentPage, totalPages, totalCount } = apiResponse.pagination;
                    info.textContent = `Trang ${currentPage}/${totalPages} - Tổng: ${totalCount} khóa học`;
                } else {
                    info.textContent = `${apiResponse.data?.length || 0} khóa học`;
                }
            }

            // Placeholder methods
            showCreateCourseModal() {
                alert('Tính năng tạo khóa học đang được phát triển');
            }

            showMyCoursesModal() {
                alert('Tính năng khóa học của tôi đang được phát triển');
            }

            showDashboard() {
                alert('Tính năng dashboard đang được phát triển');
            }

            viewCourseDetails(courseId) {
                alert('Xem chi tiết khóa học ID: ' + courseId);
            }

            manageCourseContents(courseId) {
                alert('Quản lý nội dung khóa học ID: ' + courseId);
            }

            registerForCourse(courseId) {
                alert('Đăng ký khóa học ID: ' + courseId);
            }

            clearFilters() {
                const filters = ['levelFilter', 'categoryFilter', 'statusFilter', 'startDate', 'endDate'];
                filters.forEach(id => {
                    const element = document.getElementById(id);
                    if (element) element.value = '';
                });
                
                const pageSize = document.getElementById('pageSize');
                if (pageSize) pageSize.value = '10';
                
                console.log('Filters cleared');
            }

            refreshData() {
                console.log('Refreshing data');
                this.loadCourses(this.currentPage);
            }

            // Utility methods
            showLoading() {
                if (this.elements.loadingAlert) {
                    this.elements.loadingAlert.classList.remove('d-none');
                }
            }

            hideLoading() {
                if (this.elements.loadingAlert) {
                    this.elements.loadingAlert.classList.add('d-none');
                }
            }

            showError(message) {
                console.error('Showing error:', message);
                if (this.elements.errorMessage && this.elements.errorAlert) {
                    this.elements.errorMessage.textContent = message;
                    this.elements.errorAlert.classList.remove('d-none');
                } else {
                    alert(message);
                }
            }

            hideError() {
                if (this.elements.errorAlert) {
                    this.elements.errorAlert.classList.add('d-none');
                }
            }

            formatDate(dateString) {
                if (!dateString) return 'N/A';
                try {
                    return new Date(dateString).toLocaleDateString('vi-VN');
                } catch {
                    return 'N/A';
                }
            }

            truncateText(text, maxLength) {
                if (!text || text.length <= maxLength) return text;
                return text.substring(0, maxLength) + '...';
            }
        }

        // ===== INITIALIZATION =====
        let courseService;
        let learningService;
        let courseManager;
        
        document.addEventListener('DOMContentLoaded', function() {
            console.log('=== DOM LOADED - INITIALIZING COURSE MANAGEMENT ===');
            
            try {
                // Initialize services
                courseService = new CourseService();
                learningService = new LearningService();
                courseManager = new CourseManager(courseService, learningService);
                
                // Make globally available
                window.courseService = courseService;
                window.learningService = learningService;
                window.courseManager = courseManager;
                
                console.log('=== COURSE MANAGEMENT INITIALIZED SUCCESSFULLY ===');
                
                // Auto-load courses after a short delay
                setTimeout(() => {
                    courseManager.loadCourses();
                }, 500);
                
            } catch (error) {
                console.error('=== INITIALIZATION FAILED ===', error);
                alert('Không thể khởi tạo trang quản lý khóa học: ' + error.message);
            }
        });

        // Debug utilities
        window.debugCourseManagement = {
            checkServices: function() {
                console.log('CourseService:', typeof CourseService, window.courseService);
                console.log('LearningService:', typeof LearningService, window.learningService);
                console.log('CourseManager:', typeof CourseManager, window.courseManager);
            },
            
            testAPI: function() {
                if (window.courseService) {
                    window.courseService.getCourses({ pageSize: 5 }).then(result => {
                        console.log('Test API result:', result);
                    });
                } else {
                    console.error('CourseService not available');
                }
            },
            
            loadCourses: function() {
                if (window.courseManager) {
                    window.courseManager.loadCourses();
                } else {
                    console.error('CourseManager not available');
                }
            }
        };
        
        console.log('=== INLINE SCRIPT LOADED SUCCESSFULLY ===');
        console.log('Use debugCourseManagement.checkServices() to debug');
    </script>
}

<style>
    .card.text-white h6,
    .card.text-white h3 {
        color: white !important;
    }
    
    .bg-primary {
        background-color: #0d6efd !important;
    }
    
    .bg-success {
        background-color: #198754 !important;
    }
    
    .bg-warning {
        background-color: #ffc107 !important;
    }
    
    .bg-info {
        background-color: #0dcaf0 !important;
    }
    
    .table th {
        white-space: nowrap;
        font-weight: 600;
        background-color: #343a40 !important;
        color: white !important;
    }
    
    .table td {
        vertical-align: middle;
    }
    
    .btn-group-vertical .btn {
        margin-bottom: 0.125rem;
        font-size: 0.75rem;
        padding: 0.25rem 0.5rem;
    }
    
    .badge {
        font-size: 0.7em;
    }
    
    .table-responsive {
        max-height: 600px;
        overflow-y: auto;
    }
</style>