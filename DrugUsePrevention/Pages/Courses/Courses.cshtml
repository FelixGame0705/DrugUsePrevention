@page "/courses"
@model DrugUsePrevention.Pages.Courses.CoursesModel
@{
    ViewData["Title"] = "Danh sách khóa học";
    Layout = "~/Pages/Shared/_Layout.cshtml";
}

<div class="container-fluid">
    <div class="row">
        <div class="col-12">
            <h1 class="mb-4">@ViewData["Title"]</h1>
            
            <!-- Filter Section -->
            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Lọc khóa học</h5>
                </div>
                <div class="card-body">
                    <div class="row">
                        <div class="col-md-3">
                            <label for="pageSize" class="form-label">Số lượng/trang:</label>
                            <select id="pageSize" class="form-select">
                                <option value="5">5</option>
                                <option value="10" selected>10</option>
                                <option value="20">20</option>
                                <option value="50">50</option>
                            </select>
                        </div>
                        <div class="col-md-3">
                            <label for="startDate" class="form-label">Từ ngày:</label>
                            <input type="date" id="startDate" class="form-control">
                        </div>
                        <div class="col-md-3">
                            <label for="endDate" class="form-label">Đến ngày:</label>
                            <input type="date" id="endDate" class="form-control">
                        </div>
                        <div class="col-md-3 d-flex align-items-end">
                            <button id="loadCourses" class="btn btn-primary me-2">Tải danh sách</button>
                            <button id="clearFilter" class="btn btn-outline-secondary">Xóa filter</button>
                        </div>
                    </div>
                </div>
            </div>

            <!-- API Status -->
            <div id="apiStatus" class="alert alert-info d-none">
                <i class="fas fa-spinner fa-spin"></i> Đang tải dữ liệu...
            </div>

            <!-- Error Display -->
            <div id="errorAlert" class="alert alert-danger d-none">
                <strong>Lỗi:</strong> <span id="errorMessage"></span>
            </div>

            <!-- Courses Table -->
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0">Danh sách khóa học</h5>
                    <div>
                        <button id="refreshData" class="btn btn-outline-primary">
                            <i class="fas fa-sync-alt"></i> Làm mới
                        </button>
                    </div>
                </div>
                <div class="card-body">
                    <div class="table-responsive">
                        <table id="coursesTable" class="table table-striped table-hover">
                            <thead class="table-dark">
                                <tr>
                                    <th>ID</th>
                                    <th>Tên khóa học</th>
                                    <th>Mô tả</th>
                                    <th>Ngày tạo</th>
                                    <th>Trạng thái</th>
                                    <th>Thao tác</th>
                                </tr>
                            </thead>
                            <tbody id="coursesTableBody">
                                <tr>
                                    <td colspan="6" class="text-center text-muted">
                                        Nhấn "Tải danh sách" để xem dữ liệu
                                    </td>
                                </tr>
                            </tbody>
                        </table>
                    </div>
                    
                    <!-- Pagination -->
                    <nav aria-label="Courses pagination">
                        <ul id="pagination" class="pagination justify-content-center">
                            <!-- Pagination will be generated by JavaScript -->
                        </ul>
                    </nav>
                </div>
            </div>

            <!-- Course Detail Modal -->
            <div class="modal fade" id="courseDetailModal" tabindex="-1">
                <div class="modal-dialog modal-lg">
                    <div class="modal-content">
                        <div class="modal-header">
                            <h5 class="modal-title">Chi tiết khóa học</h5>
                            <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
                        </div>
                        <div class="modal-body">
                            <div id="courseDetailContent">
                                <!-- Course details will be loaded here -->
                            </div>
                        </div>
                        <div class="modal-footer">
                            <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Đóng</button>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    <script>
        let currentPage = 1;
        let totalPages = 1;
        
        // API Base URL
        const API_BASE = '/api/courses';
        
        // Load courses function
        async function loadCourses(page = 1) {
            try {
                showLoading();
                hideError();
                
                // Ensure page is a valid number
                page = parseInt(page) || 1;
                if (page < 1) page = 1;
                
                console.log('Loading courses for page:', page);
                
                const pageSize = document.getElementById('pageSize').value;
                const startDate = document.getElementById('startDate').value;
                const endDate = document.getElementById('endDate').value;
                
                let url = `${API_BASE}?pageIndex=${page}&pageSize=${pageSize}`;
                
                if (startDate) url += `&startDate=${startDate}`;
                if (endDate) url += `&endDate=${endDate}`;
                
                console.log('Calling API:', url);
                
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Content-Type': 'application/json',
                        // 'Authorization': 'Bearer ' + getToken() // Uncomment when implementing auth
                    }
                });
                
                console.log('Response status:', response.status);
                
                if (!response.ok) {
                    const errorText = await response.text();
                    console.log('Error response:', errorText);
                    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
                }
                
                const data = await response.json();
                console.log('Response data:', data);
                
                displayCourses(data);
                updatePagination(data);
                
            } catch (error) {
                console.error('Error loading courses:', error);
                showError(`Không thể tải danh sách khóa học: ${error.message}`);
            } finally {
                hideLoading();
            }
        }
        
        // Display courses in table
        function displayCourses(apiResponse) {
            const tbody = document.getElementById('coursesTableBody');

           if (!apiResponse.success || !apiResponse.data || !Array.isArray(apiResponse.data)) {
                tbody.innerHTML = '<tr><td colspan="6" class="text-center text-danger">Không có dữ liệu hoặc lỗi API</td></tr>';
                return;
            }
            
            const courses = apiResponse.data;
            
            if (courses.length === 0) {
                tbody.innerHTML = '<tr><td colspan="6" class="text-center text-muted">Không có khóa học nào</td></tr>';
                return;
            }
            
            tbody.innerHTML = courses.map(course => `
                <tr>
                    <td>${course.courseID || 'N/A'}</td>
                    <td>${course.title || 'N/A'}</td>
                    <td>${truncateText(course.description || 'N/A', 100)}</td>
                    <td>${formatDate(course.createdAt)}</td>
                    <td>
                        <span class="badge ${course.isActive ? 'bg-success' : 'bg-secondary'}">
                            ${course.isActive ? 'Hoạt động' : 'Không hoạt động'}
                        </span>
                        ${course.isAccept ? '<span class="badge bg-primary ms-1">Đã duyệt</span>' : '<span class="badge bg-warning ms-1">Chờ duyệt</span>'}
                    </td>
                    <td>
                        <button class="btn btn-sm btn-outline-primary" onclick="viewCourseDetail(${course.courseID})">
                            <i class="fas fa-eye"></i> Xem
                        </button>
                        <button class="btn btn-sm btn-outline-info" onclick="loadCourseContents(${course.courseID})">
                            <i class="fas fa-list"></i> Nội dung
                        </button>
                    </td>
                </tr>
            `).join('');
        }
        
        // View course detail
        async function viewCourseDetail(courseId) {
            try {
                showLoading();
                
                const response = await fetch(`${API_BASE}/${courseId}`);
                if (!response.ok) throw new Error(`HTTP ${response.status}`);
                
                const data = await response.json();
                
                // Fix: API returns 'success' not 'isSuccess'
                if (data.success && data.data) {
                    const course = data.data;
                    document.getElementById('courseDetailContent').innerHTML = `
                        <div class="row">
                            <div class="col-md-6">
                                <h6>Thông tin cơ bản</h6>
                                <p><strong>ID:</strong> ${course.courseID}</p>
                                <p><strong>Tên:</strong> ${course.title}</p>
                                <p><strong>Mô tả:</strong> ${course.description}</p>
                                <p><strong>Ngày tạo:</strong> ${formatDate(course.createdAt)}</p>
                            </div>
                            <div class="col-md-6">
                                <h6>Trạng thái</h6>
                                <p><strong>Hoạt động:</strong> ${course.isActive ? 'Có' : 'Không'}</p>
                                <p><strong>Đã duyệt:</strong> ${course.isAccept ? 'Có' : 'Không'}</p>
                                <p><strong>Cập nhật cuối:</strong> ${formatDate(course.updatedAt)}</p>
                            </div>
                        </div>
                    `;
                    
                    const modal = new bootstrap.Modal(document.getElementById('courseDetailModal'));
                    modal.show();
                } else {
                    showError('Không thể tải chi tiết khóa học');
                }
                
            } catch (error) {
                showError(`Lỗi: ${error.message}`);
            } finally {
                hideLoading();
            }
        }
        
        // Load course contents
        async function loadCourseContents(courseId) {
            try {
                showLoading();
                
                const response = await fetch(`${API_BASE}/${courseId}/contents/active`);
                if (!response.ok) throw new Error(`HTTP ${response.status}`);
                
                const data = await response.json();
                
                // Fix: API returns 'success' not 'isSuccess'
                if (data.success && data.data) {
                    const contents = data.data;
                    let contentHtml = '<h6>Nội dung khóa học</h6>';
                    
                    if (contents.length === 0) {
                        contentHtml += '<p class="text-muted">Chưa có nội dung nào</p>';
                    } else {
                        contentHtml += '<ul class="list-group">';
                        contents.forEach(content => {
                            contentHtml += `
                                <li class="list-group-item">
                                    <strong>${content.title}</strong>
                                    <p class="mb-1 text-muted">${content.description || 'Không có mô tả'}</p>
                                    <small>Thứ tự: ${content.orderIndex}</small>
                                </li>
                            `;
                        });
                        contentHtml += '</ul>';
                    }
                    
                    document.getElementById('courseDetailContent').innerHTML = contentHtml;
                    const modal = new bootstrap.Modal(document.getElementById('courseDetailModal'));
                    modal.show();
                } else {
                    showError('Không thể tải nội dung khóa học');
                }
                
            } catch (error) {
                showError(`Lỗi: ${error.message}`);
            } finally {
                hideLoading();
            }
        }
        
        // Update pagination
        function updatePagination(apiResponse) {
            const pagination = document.getElementById('pagination');
            
            // Fix: API response structure - pagination info is in apiResponse.pagination
            if (!apiResponse.pagination) {
                pagination.innerHTML = '';
                return;
            }
            
            // Fix: API uses 'currentPage' not 'pageIndex'
            currentPage = parseInt(apiResponse.pagination.currentPage) || 1;
            totalPages = parseInt(apiResponse.pagination.totalPages) || 1;
            
            console.log('Pagination info:', { currentPage, totalPages, pagination: apiResponse.pagination });
            
            let paginationHtml = '';
            
            // Previous button
            paginationHtml += `
                <li class="page-item ${currentPage === 1 ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="event.preventDefault(); loadCourses(${Math.max(1, currentPage - 1)})">Trước</a>
                </li>
            `;
            
            // Page numbers
            for (let i = Math.max(1, currentPage - 2); i <= Math.min(totalPages, currentPage + 2); i++) {
                paginationHtml += `
                    <li class="page-item ${i === currentPage ? 'active' : ''}">
                        <a class="page-link" href="#" onclick="event.preventDefault(); loadCourses(${i})">${i}</a>
                    </li>
                `;
            }
            
            // Next button  
            paginationHtml += `
                <li class="page-item ${currentPage >= totalPages ? 'disabled' : ''}">
                    <a class="page-link" href="#" onclick="event.preventDefault(); loadCourses(${Math.min(totalPages, currentPage + 1)})">Sau</a>
                </li>
            `;
            
            pagination.innerHTML = paginationHtml;
        }
        
        // Utility functions
        function showLoading() {
            document.getElementById('apiStatus').classList.remove('d-none');
        }
        
        function hideLoading() {
            document.getElementById('apiStatus').classList.add('d-none');
        }
        
        function showError(message) {
            document.getElementById('errorMessage').textContent = message;
            document.getElementById('errorAlert').classList.remove('d-none');
        }
        
        function hideError() {
            document.getElementById('errorAlert').classList.add('d-none');
        }
        
        function formatDate(dateString) {
            if (!dateString) return 'N/A';
            return new Date(dateString).toLocaleString('vi-VN');
        }
        
        function truncateText(text, maxLength) {
            if (text.length <= maxLength) return text;
            return text.substring(0, maxLength) + '...';
        }
        
        // Event listeners
        document.addEventListener('DOMContentLoaded', function() {
            document.getElementById('loadCourses').addEventListener('click', () => loadCourses(1));
            document.getElementById('refreshData').addEventListener('click', () => loadCourses(currentPage));
            document.getElementById('clearFilter').addEventListener('click', function() {
                document.getElementById('startDate').value = '';
                document.getElementById('endDate').value = '';
                document.getElementById('pageSize').value = '10';
            });
        });
    </script>
}

<style>
    .table th {
        white-space: nowrap;
    }
    
    .btn-sm {
        margin: 1px;
    }
    
    .modal-body {
        max-height: 70vh;
        overflow-y: auto;
    }
    
    .pagination .page-link {
        color: #0d6efd;
    }
    
    .pagination .page-item.active .page-link {
        background-color: #0d6efd;
        border-color: #0d6efd;
    }
</style>